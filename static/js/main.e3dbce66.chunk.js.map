{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BookComponent","props","getAuthor","authors","react_default","a","createElement","className","src","alt","title","RowComponent","books","map","book","index","App_BookComponent","Object","assign","key","App","state","amBooks","nzBooks","searchApi","q","arguments","length","undefined","url","concat","axios","get","then","_ref","data","items","reduce","acc","cv","_cv$volumeInfo","volumeInfo","bookInfo","imageLinks","smallThumbnail","firstCharTitleLetter","toLowerCase","includes","objectSpread","toConsumableArray","console","log","_this","setState","sort","b","catch","err","componentDidMount","App_RowComponent","this","class","Array","fill","item","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e3dbce66.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport {\n  Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle, Button\n} from 'reactstrap';\n\nconst BookComponent = (props) => {\n  const getAuthor = props.authors? props.authors[0] : \"\";\n  return (\n    <div className=\"card col-2 cardMargin\">\n      <img className=\"card-img-top\" src={props.src} alt=\"Card image cap\" />\n      <div className=\"card-body col-12\">\n        <h6 className=\"card-text\"><b>{props.title}</b></h6>\n        <p className=\"card-text\">{getAuthor}</p>\n      </div>\n    </div>\n  )\n}\n\nconst RowComponent = (props) => {\n  return (\n    <ul className=\"row title thumbnails\">\n      <li>\n        <h4>Titles A-M</h4>\n        <div className='row'>\n          {props.books.map((book, index) => {\n            return <BookComponent key={index} {...book} />\n          })}\n        </div>\n        <br />\n        <div className=\"col-12 text-center\">\n          <a className=\"btn btn-primary\">Show More</a>\n        </div>\n      </li>\n    </ul>\n  )\n}\n\nclass App extends Component {\n  state = {\n    amBooks: [],\n    nzBooks: [],\n  }\n\n  searchApi = (q=\"tech%5D\") => {\n    const url = `https://www.googleapis.com/books/v1/volumes?q=${q}`\n    return axios.get(url).then(({ data }) => {\n      const books = data.items.reduce((acc, cv) => {\n        const { title, authors, imageLinks: { smallThumbnail } } = cv.volumeInfo\n        const bookInfo = { title, authors, src: smallThumbnail }\n        const firstCharTitleLetter = title[0].toLowerCase();\n        const amLetters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \" h\", \"i\", \"j\", \"k\", \"l\", \"m\"];\n        if (amLetters.includes(firstCharTitleLetter)) {\n          return ({ ...acc, amBooks: [...acc.amBooks, bookInfo] })\n        } else {\n          return ({ ...acc, nzBooks: [...acc.nzBooks, bookInfo] })\n        }\n      }, { amBooks: [], nzBooks: [] })\n\n      console.log(\"Georgia Tech\" > \"Live Work Work Work Die\")\n\n      return this.setState({\n        amBooks: books.amBooks.sort((a, b) => a.title > b.title),\n        nzBooks: books.nzBooks.sort((a, b) => a.title > b.title)\n      })\n    }).catch(err => {\n      console.log(err)\n    })\n  };\n\n  componentDidMount = () => {\n    return this.searchApi();\n  }\n\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <div>\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <a className=\"navbar-brand\"><h5>Assemble Books</h5></a>\n          </nav>\n          <br />\n          <h2>Books</h2>\n        </div>\n        <RowComponent books={this.state.amBooks} />\n        <RowComponent books={this.state.nzBooks} />\n        <div class=\"row card-footer text-muted\">\n          <h6>Assemble</h6>\n          {new Array(9).fill({}).map((item, index) => {\n            return (\n              <ul className=\"thumbnails\">\n                <li>\n                  <a href=\"\" key={index}>link</a>\n                </li>\n              </ul>\n            )\n          })}\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}